{"version":3,"sources":["webpack:///./src/subpages/account.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx","webpack:///./src/components/Timestamp.tsx","webpack:///./src/components/List.tsx","webpack:///./src/components/OffsetSwitch.tsx","webpack:///./src/misc/columns.tsx","webpack:///./src/misc/useOffset.ts","webpack:///./src/misc/useSearchParams.ts"],"names":["Ul","styled","ul","_templateObject","AccountPage","_ref","location","hash","useQueryString","slice","_useOffset","useOffset","txOffset","txOlderHandler","txNewerHandler","_useOffset2","mineOffset","mineOlderHandler","mineNewerHandler","_useState","useState","excludeEmptyTxs","setExcludeEmptyTxs","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_components_Wrapper__WEBPACK_IMPORTED_MODULE_8__","_generated_graphql__WEBPACK_IMPORTED_MODULE_11__","variables","involvedAddress","_ref2","data","loading","error","console","message","transactions","transactionQuery","Error","_splitTransactions","splitTransactions","signedTransactions","involvedTransactions","missingNonces","length","offset","limit","_ref3","Fragment","_components_OffsetSwitch__WEBPACK_IMPORTED_MODULE_10__","disable","older","newer","TransactionListWrap","_splitTransactions2","olderHandler","newerHandler","signed","involved","miner","_ref4","blocks","blockQuery","_fluentui_react__WEBPACK_IMPORTED_MODULE_7__","label","checked","disabled","onChange","BlockList","columns","mineColumns","_ref5","counter","TransactionList","notFoundMessage","map","nonce","key","items","undefined","_ref6","props","_objectWithoutPropertiesLoose","_components_List__WEBPACK_IMPORTED_MODULE_9__","Object","assign","txColumns","onItemInvoked","block","navigate","_ref7","forEach","tx","signer","push","i","prevNonce","missingNonce","useMemo","search","substr","useCallback","queryString","path","pathname","withPrefix","BlockCommonFragmentDoc","gql","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","_templateObject5","TransactionByIdDocument","_templateObject6","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject7","TransactionsByAccountComponent","formatOptions","hour","minute","year","month","day","Timestamp","timestamp","date","Date","now","getFullYear","getMonth","getDate","timeStyle","react__WEBPACK_IMPORTED_MODULE_4___default","dateTime","toISOString","title","toLocaleString","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react_lib_ShimmeredDetailsList__WEBPACK_IMPORTED_MODULE_3__","List","setKey","selectionMode","SelectionMode","none","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","enableShimmer","OffsetSwitch","className","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","onClick","css","commonProps","isRowHeader","isResizable","isSorted","name","fieldName","iconName","isIconOnly","minWidth","maxWidth","isSortedDescending","isPadded","onRender","index","react__WEBPACK_IMPORTED_MODULE_2___default","Number","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","href","_components_Timestamp__WEBPACK_IMPORTED_MODULE_4__","difficulty","Math","floor","id","_ref8","_ref9","d","__webpack_exports__","keyName","_useSearchParams","_useQueryString","setQueryString","querystring","parse","searchParams","stringify","useSearchParams","setSearchParams","setOffset"],"mappings":"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","file":"component---src-subpages-account-tsx-7287ced1eff5a7a14d83.js","sourcesContent":["import React, { useState } from 'react';\nimport { navigate } from 'gatsby-link';\nimport { Checkbox } from '@fluentui/react';\n\nimport Wrapper from '../components/Wrapper';\nimport List, { OmitListProps, BlockListProps } from '../components/List';\nimport OffsetSwitch from '../components/OffsetSwitch';\n\nimport {\n  Transaction,\n  TransactionsByAccountComponent,\n  Block,\n  BlockListComponent,\n} from '../generated/graphql';\n\nimport { IndexPageProps } from '../pages';\n\nimport useQueryString from '../misc/useQueryString';\nimport useOffset, { limit } from '../misc/useOffset';\nimport { mineColumns, txColumns } from '../misc/columns';\n\nimport styled from '@emotion/styled';\n\ntype AccountPageProps = IndexPageProps;\n\nconst Ul = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nconst AccountPage: React.FC<AccountPageProps> = ({ location }) => {\n  const hash = useQueryString(location)[0].slice(0, 42);\n\n  const [txOffset, txOlderHandler, txNewerHandler] = useOffset(location, 'tx');\n  const [mineOffset, mineOlderHandler, mineNewerHandler] = useOffset(\n    location,\n    'mine'\n  );\n  const [excludeEmptyTxs, setExcludeEmptyTxs] = useState(false);\n  return (\n    <Wrapper>\n      <h1>Account Details</h1>\n      <p>\n        Account Number: <b>{hash}</b>\n      </p>\n\n      <h2>Transactions count</h2>\n\n      <TransactionsByAccountComponent variables={{ involvedAddress: hash }}>\n        {({ data, loading, error }) => {\n          if (error) {\n            console.error(error);\n            return <p>{error.message}</p>;\n          }\n\n          if (loading)\n            return (\n              <Ul>\n                <li>Signed Transaction: Loading…</li>\n                <li>Involved Transaction: Loading…</li>\n                <li>missingNonces: Loading…</li>\n              </Ul>\n            );\n\n          const transactions =\n            data && data.transactionQuery && data.transactionQuery.transactions\n              ? data.transactionQuery.transactions\n              : null;\n\n          if (transactions === null) throw Error('transactions query failed');\n\n          const {\n            signedTransactions,\n            involvedTransactions,\n            missingNonces,\n          } = splitTransactions(transactions, hash);\n\n          return (\n            <Ul>\n              <li>Signed Transaction: {signedTransactions.length}</li>\n              <li>Involved Transaction: {involvedTransactions.length}</li>\n              <li>missingNonces: {missingNonces.length}</li>\n            </Ul>\n          );\n        }}\n      </TransactionsByAccountComponent>\n\n      <TransactionsByAccountComponent\n        variables={{ offset: txOffset, limit, involvedAddress: hash }}>\n        {({ data, loading, error }) => {\n          if (error) {\n            console.error(error);\n            return <p>{error.message}</p>;\n          }\n\n          if (loading)\n            return (\n              <>\n                <OffsetSwitch disable={{ older: true, newer: true }} />\n                <TransactionListWrap loading={true} />\n              </>\n            );\n\n          const transactions =\n            data && data.transactionQuery && data.transactionQuery.transactions\n              ? data.transactionQuery.transactions\n              : null;\n\n          if (transactions === null) throw Error('transactions query failed');\n\n          const {\n            signedTransactions,\n            involvedTransactions,\n            missingNonces,\n          } = splitTransactions(transactions, hash);\n\n          return (\n            <>\n              <OffsetSwitch\n                olderHandler={txOlderHandler}\n                newerHandler={txNewerHandler}\n                disable={{\n                  older: loading || transactions.length < limit,\n                  newer: loading || txOffset === 0,\n                }}\n              />\n              <TransactionListWrap\n                loading={false}\n                signed={signedTransactions}\n                involved={involvedTransactions}\n                missingNonces={missingNonces}\n              />\n            </>\n          );\n        }}\n      </TransactionsByAccountComponent>\n      <h2>Mined Blocks</h2>\n      <BlockListComponent\n        variables={{ offset: mineOffset, limit, excludeEmptyTxs, miner: hash }}>\n        {({ data, loading, error }) => {\n          if (error) {\n            console.error(error);\n            return <p>{error.message}</p>;\n          }\n          const blocks =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? (data.blockQuery.blocks as Block[])\n              : null;\n          return (\n            <>\n              <Checkbox\n                label=\"Include blocks having any tx\"\n                checked={excludeEmptyTxs}\n                disabled={loading}\n                onChange={() => {\n                  setExcludeEmptyTxs(!excludeEmptyTxs);\n                }}\n              />\n              <OffsetSwitch\n                olderHandler={mineOlderHandler}\n                newerHandler={mineNewerHandler}\n                disable={{\n                  older: loading || (!!blocks && blocks.length < limit),\n                  newer: loading || mineOffset === 0,\n                }}\n              />\n              <BlockList\n                blocks={blocks}\n                loading={loading}\n                columns={mineColumns}\n              />\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </Wrapper>\n  );\n};\n\nexport default AccountPage;\n\ninterface TransactionListWrapProps {\n  signed?: Transaction[];\n  involved?: Transaction[];\n  missingNonces?: number[];\n  loading: boolean;\n}\n\nconst TransactionListWrap: React.FC<TransactionListWrapProps> = ({\n  signed,\n  involved,\n  missingNonces,\n  loading,\n}) => (\n  <>\n    <h2>Signed Transactions{counter(signed)}</h2>\n    <TransactionList\n      loading={loading}\n      transactions={signed ? signed : null}\n      notFoundMessage={'No Signed Transactions'}\n    />\n    <h2>Involved Transactions{counter(involved)}</h2>\n    <TransactionList\n      loading={loading}\n      transactions={involved ? involved : null}\n      notFoundMessage={'No Involved Transactions'}\n    />\n    <h2>Missing Nonces{counter(missingNonces)}</h2>\n    {missingNonces ? (\n      missingNonces.length > 0 ? (\n        missingNonces.map(nonce => <p key={nonce}>{nonce}</p>)\n      ) : (\n        <div>No missing nonces.</div>\n      )\n    ) : (\n      'Loading…'\n    )}\n  </>\n);\n\nconst counter = (items?: unknown[]) =>\n  items !== undefined && items.length > 0 && `: ${items.length}`;\n\ninterface TransactionListProps\n  extends Omit<OmitListProps, 'columns' | 'items'> {\n  transactions: Transaction[] | null;\n}\n\nexport const TransactionList: React.FC<TransactionListProps> = ({\n  transactions,\n  ...props\n}) => (\n  <List\n    items={transactions}\n    {...props}\n    columns={txColumns}\n    onItemInvoked={block => navigate(`/search/?${block.hash}`)}\n  />\n);\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks, ...props }) => (\n  <List\n    items={blocks}\n    {...props}\n    onItemInvoked={(block: Block) => navigate(`/search/?${block.hash}`)}\n  />\n);\n\nfunction splitTransactions(transactions: Transaction[], hash: string) {\n  const signedTransactions: Transaction[] = [],\n    involvedTransactions: Transaction[] = [];\n  transactions.forEach(tx => {\n    if (tx.signer === hash) {\n      signedTransactions.push(tx);\n    } else {\n      involvedTransactions.push(tx);\n    }\n  });\n\n  const missingNonces: number[] = [];\n  for (let i = 1; i < signedTransactions.length; ++i) {\n    const prevNonce = signedTransactions[i - 1].nonce;\n    const nonce = signedTransactions[i].nonce;\n    if (prevNonce === nonce - 1) continue;\n    for (\n      let missingNonce = prevNonce + 1;\n      missingNonce < nonce;\n      ++missingNonce\n    ) {\n      missingNonces.push(missingNonce);\n    }\n  }\n  return { signedTransactions, involvedTransactions, missingNonces };\n}\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n   __typename?: 'Action',\n  arguments: Array<ActionArgumentType>,\n};\n\nexport type ActionArgumentType = {\n   __typename?: 'ActionArgumentType',\n  key: Scalars['String'],\n  value: Scalars['String'],\n};\n\n\nexport type Block = {\n   __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n   __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>,\n  miner?: Maybe<Scalars['Address']>\n};\n\n\n\n\n\n\n\nexport type Query = {\n   __typename?: 'Query',\n  blockQuery?: Maybe<BlockQuery>,\n  transactionQuery?: Maybe<TransactionQuery>,\n};\n\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  actions: Array<Action>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\n\nexport type TransactionQuery = {\n   __typename?: 'TransactionQuery',\n  transaction?: Maybe<Transaction>,\n  transactions: Array<Transaction>,\n};\n\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'> & { actions: Array<({ __typename?: 'Action' } & { arguments: Array<({ __typename?: 'ActionArgumentType' } & Pick<ActionArgumentType, 'key' | 'value'>)> })> });\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean'],\n  miner?: Maybe<Scalars['Address']>\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> })> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> })> });\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc: Scalars['Boolean'],\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type TransactionListQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress: Scalars['Address'],\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\n\n\nexport type TransactionsByAccountQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  actions {\n    arguments {\n      key\n      value\n    }\n  }\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!, $miner: Address) {\n  blockQuery {\n    blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs, miner: $miner) {\n      ...BlockCommon\n      miner\n      transactions {\n        id\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  blockQuery {\n    block(hash: $hash) {\n      ...BlockCommon\n      miner\n      nonce\n      previousBlock {\n        hash\n      }\n      transactions {\n        ...TransactionCommon\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionListDocument = gql`\n    query TransactionList($signer: Address, $involvedAddress: Address, $desc: Boolean!, $offset: Int!, $limit: Int!) {\n  transactionQuery {\n    transactions(signer: $signer, involvedAddress: $involvedAddress, desc: $desc, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionListQuery, TransactionListQueryVariables>, 'query'> & ({ variables: TransactionListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionListComponent = (props: TransactionListComponentProps) => (\n      <ApolloReactComponents.Query<TransactionListQuery, TransactionListQueryVariables> query={TransactionListDocument} {...props} />\n    );\n    \nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionListQuery, TransactionListQueryVariables> & TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionListQuery,\n  TransactionListQueryVariables,\n  TransactionListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionListQuery, TransactionListQueryVariables, TransactionListProps<TChildProps>>(TransactionListDocument, {\n      alias: 'withTransactionList',\n      ...operationOptions\n    });\n};\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<TransactionListQuery, TransactionListQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transactionQuery {\n    transaction(id: $id) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;\nexport const TransactionsByAccountDocument = gql`\n    query TransactionsByAccount($involvedAddress: Address!, $offset: Int, $limit: Int) {\n  transactionQuery {\n    transactions(involvedAddress: $involvedAddress, desc: true, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionsByAccountComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>, 'query'> & ({ variables: TransactionsByAccountQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionsByAccountComponent = (props: TransactionsByAccountComponentProps) => (\n      <ApolloReactComponents.Query<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> query={TransactionsByAccountDocument} {...props} />\n    );\n    \nexport type TransactionsByAccountProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> & TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables,\n  TransactionsByAccountProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionsByAccountQuery, TransactionsByAccountQueryVariables, TransactionsByAccountProps<TChildProps>>(TransactionsByAccountDocument, {\n      alias: 'withTransactionsByAccount',\n      ...operationOptions\n    });\n};\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>;","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\n\nconst formatOptions: Intl.DateTimeFormatOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  year: '2-digit',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { year, month, day, ...timeStyle } = formatOptions;\n    return (\n      <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n        {date.toLocaleString(undefined, timeStyle)}\n      </time>\n    );\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {date.toLocaleString(undefined, formatOptions)}\n    </time>\n  );\n};\n\nexport default Timestamp;\n","import React from 'react';\nimport {\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from '@fluentui/react/lib/DetailsList';\nimport { ShimmeredDetailsList } from '@fluentui/react/lib/ShimmeredDetailsList';\nimport { Block } from '../generated/graphql';\n\ninterface ListProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  items: any[] | null;\n  loading: boolean;\n  columns: IColumn[];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onItemInvoked: (item: any) => void;\n  notFoundMessage?: string;\n}\n\nconst List: React.FC<ListProps> = ({\n  items,\n  loading,\n  columns,\n  onItemInvoked,\n  notFoundMessage,\n}) => {\n  if (!loading && notFoundMessage && items && items.length === 0)\n    return <p>{notFoundMessage}</p>;\n  return (\n    <ShimmeredDetailsList\n      setKey=\"set\"\n      items={items === null || loading ? [] : items}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      enableShimmer={loading}\n      onItemInvoked={onItemInvoked}\n    />\n  );\n};\n\nexport default List;\n\nexport type OmitListProps = Omit<ListProps, 'onItemInvoked' | 'items'>;\n\nexport interface BlockListProps extends OmitListProps {\n  blocks: Block[] | null;\n}\n","import React from 'react';\n\nimport { css } from 'emotion';\nimport { DefaultButton } from '@fluentui/react';\n\ninterface OffsetSwitchProps {\n  newerHandler?: () => void;\n  olderHandler?: () => void;\n  disable: { older: boolean; newer: boolean };\n}\n\nconst OffsetSwitch: React.FC<OffsetSwitchProps> = ({\n  newerHandler,\n  olderHandler,\n  disable,\n}) => (\n  <div className=\"nav\">\n    <DefaultButton\n      onClick={newerHandler}\n      disabled={disable.newer}\n      className={css`\n        margin-right: 5px;\n      `}>\n      &larr; Newer\n    </DefaultButton>\n    <DefaultButton disabled={disable.older} onClick={olderHandler}>\n      Older &rarr;\n    </DefaultButton>\n  </div>\n);\n\nexport default OffsetSwitch;\n","import React from 'react';\nimport { Link } from '@fluentui/react';\n\nimport Timestamp from '../components/Timestamp';\nimport { Block, Transaction } from '../generated/graphql';\n\nexport const commonProps = {\n  isRowHeader: true,\n  isResizable: true,\n  isSorted: false,\n};\n\nexport const mineColumns = [\n  {\n    key: 'columnIndex',\n    name: 'Index',\n    fieldName: 'index',\n    iconName: 'NumberSymbol',\n    isIconOnly: true,\n    minWidth: 5,\n    maxWidth: 50,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ index }: Block) => <>{Number(index).toLocaleString()}</>,\n  },\n  {\n    key: 'columnHash',\n    name: 'Block Hash',\n    fieldName: 'hash',\n    minWidth: 5,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ hash }: Block) => (\n      <Link href={`./block/?${hash}`}>{hash}</Link>\n    ),\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ timestamp }: Block) => <Timestamp timestamp={timestamp} />,\n  },\n  {\n    key: 'columnMiner',\n    name: 'Miner',\n    fieldName: 'miner',\n    minWidth: 123,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ miner }: Block) => (\n      <Link href={`./account/?${miner}`}>{miner}</Link>\n    ),\n  },\n  {\n    key: 'columnDifficulty',\n    name: 'Difficulty',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ difficulty }: Block) => (\n      <>{Math.floor(difficulty).toLocaleString()}</>\n    ),\n  },\n  {\n    key: 'columnTxNumber',\n    name: 'Tx #',\n    minWidth: 5,\n    maxWidth: 40,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ transactions }: Block) => <>{transactions.length}</>,\n  },\n];\n\nexport const txColumns = [\n  {\n    key: 'columnNonce',\n    name: 'Nonce',\n    fieldName: 'nonce',\n    minWidth: 5,\n    maxWidth: 50,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n  },\n  {\n    key: 'columnId',\n    name: 'ID',\n    fieldName: 'id',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    // FIXME: We'd better to use absolute paths and make Gatsby automatically\n    // to rebase these absolute paths on the PATH_PREFIX configuration.\n    onRender: ({ id }: Transaction) => (\n      <Link href={`../transaction/?${id}`}>{id}</Link>\n    ),\n  },\n  {\n    key: 'columnSignature',\n    name: 'Signature',\n    fieldName: 'signature',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n  },\n  {\n    key: 'columnSigner',\n    name: 'Signer',\n    fieldName: 'signer',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ signer }: Transaction) => (\n      // FIXME: We'd better to use absolute paths and make Gatsby automatically\n      // to rebase these absolute paths on the PATH_PREFIX configuration.\n      <Link href={`./?${signer}`}>{signer}</Link>\n    ),\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ timestamp }: Transaction) => (\n      <Timestamp timestamp={timestamp} />\n    ),\n  },\n];\n","import useSearchParams from './useSearchParams';\n\nexport const limit = 21;\nexport default function useOffset(location: Location, keyName = 'offset') {\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const offset = keyName in searchParams ? searchParams[keyName] : 0;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      delete searchParams[keyName];\n      setSearchParams(searchParams);\n    } else {\n      searchParams[keyName] = offset;\n      setSearchParams(searchParams);\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n  return [offset, olderHandler, newerHandler] as const;\n}\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: object) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n"],"sourceRoot":""}