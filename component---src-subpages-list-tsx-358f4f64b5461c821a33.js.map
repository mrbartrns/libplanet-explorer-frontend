{"version":3,"sources":["webpack:///./src/subpages/list.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx","webpack:///./src/components/Timestamp.tsx","webpack:///./src/components/List.tsx","webpack:///./src/components/OffsetSwitch.tsx","webpack:///./src/misc/columns.tsx","webpack:///./src/misc/useOffset.ts","webpack:///./src/misc/useSearchParams.ts"],"names":["ListPage","_ref","location","_useOffset","useOffset","offset","olderHandler","newerHandler","_useState","useState","excludeEmptyTxs","setExcludeEmptyTxs","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","label","checked","onChange","_generated_graphql__WEBPACK_IMPORTED_MODULE_4__","variables","limit","pollInterval","_ref2","data","loading","error","console","message","blocks","blockQuery","Fragment","SummaryCards","_components_OffsetSwitch__WEBPACK_IMPORTED_MODULE_8__","disable","older","newer","BlockList","columns","mineColumns","_ref3","Cards","interval","difficultyAverage","totalTxNumber","timestamps","map","block","Date","timestamp","i","length","difficulties","difficulty","reduce","d","sum","transactions","b","_ref4","className","key","Math","floor","toLocaleString","_ref5","timeTaken","Object","assign","name","minWidth","maxWidth","commonProps","isSortedDescending","isPadded","onRender","index","Error","undefined","beforeBlock","min","beforeTimestamp","parse","nowTimestamp","splice","_components_List__WEBPACK_IMPORTED_MODULE_7__","items","onItemInvoked","navigate","hash","useQueryString","useMemo","search","substr","useCallback","queryString","path","pathname","withPrefix","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","_templateObject5","TransactionByIdDocument","_templateObject6","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject7","TransactionsByAccountComponent","formatOptions","hour","minute","year","month","day","Timestamp","date","now","getFullYear","getMonth","getDate","timeStyle","_objectWithoutPropertiesLoose","react__WEBPACK_IMPORTED_MODULE_4___default","dateTime","toISOString","title","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react_lib_ShimmeredDetailsList__WEBPACK_IMPORTED_MODULE_3__","List","notFoundMessage","setKey","selectionMode","SelectionMode","none","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","enableShimmer","OffsetSwitch","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","onClick","disabled","css","isRowHeader","isResizable","isSorted","fieldName","iconName","isIconOnly","react__WEBPACK_IMPORTED_MODULE_2___default","Number","href","_components_Timestamp__WEBPACK_IMPORTED_MODULE_4__","miner","_ref6","txColumns","_ref7","id","_ref8","signer","_ref9","__webpack_exports__","keyName","_useSearchParams","_useQueryString","setQueryString","querystring","searchParams","stringify","useSearchParams","setSearchParams","setOffset"],"mappings":"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","file":"component---src-subpages-list-tsx-358f4f64b5461c821a33.js","sourcesContent":["import React, { useState } from 'react';\nimport { navigate } from 'gatsby';\n\nimport { Checkbox, IColumn } from '@fluentui/react';\n\nimport { Block, BlockListComponent } from '../generated/graphql';\n\nimport useOffset, { limit } from '../misc/useOffset';\nimport { mineColumns, commonProps } from '../misc/columns';\n\nimport List, { BlockListProps } from '../components/List';\nimport OffsetSwitch from '../components/OffsetSwitch';\n\nimport { IndexPageProps } from '../pages/index';\n\ntype ListPageProps = IndexPageProps;\n\nconst POLL_INTERVAL = 2000;\n\nconst ListPage: React.FC<ListPageProps> = ({ location }) => {\n  const [offset, olderHandler, newerHandler] = useOffset(location);\n  const [excludeEmptyTxs, setExcludeEmptyTxs] = useState(false);\n  return (\n    <main>\n      <Checkbox\n        label=\"Include blocks having any tx\"\n        checked={excludeEmptyTxs}\n        onChange={() => setExcludeEmptyTxs(!excludeEmptyTxs)}\n      />\n      <BlockListComponent variables={{ offset, limit, excludeEmptyTxs }}\n                          pollInterval={POLL_INTERVAL}>\n        {({ data, loading, error }) => {\n          if (error) {\n            console.error(error);\n            return <p>{error.message}</p>;\n          }\n          const blocks =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? (data.blockQuery.blocks as Block[])\n              : null;\n\n          return (\n            <>\n              <SummaryCards blocks={blocks} />\n              <OffsetSwitch\n                olderHandler={olderHandler}\n                newerHandler={newerHandler}\n                disable={{ older: loading, newer: loading || offset < 1 }}\n              />\n              <BlockList\n                blocks={blocks}\n                loading={loading}\n                columns={mineColumns}\n              />\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </main>\n  );\n};\n\nexport default ListPage;\n\nexport interface SummaryCardsProps {\n  blocks: Block[] | null;\n}\n\nconst SummaryCards: React.FC<SummaryCardsProps> = ({ blocks }) => {\n  if (blocks === null)\n    return <Cards interval={0} difficultyAverage={0} totalTxNumber={0} />;\n\n  const timestamps: Date[] = blocks.map(block => new Date(block.timestamp));\n\n  let interval = 0;\n  for (let i = 0; i < timestamps.length - 1; i++) {\n    interval += +timestamps[i] - +timestamps[i + 1];\n  }\n  interval /= (timestamps.length - 1) * 1000;\n\n  const difficulties = blocks.map(block => block.difficulty);\n  const difficultyAverage =\n    difficulties.reduce((d, sum) => d + sum, 0) / difficulties.length;\n\n  const txNumbers = blocks.map(block => block.transactions.length);\n  const totalTxNumber = txNumbers.reduce((a, b) => a + b, 0);\n  return (\n    <Cards\n      interval={interval}\n      difficultyAverage={difficultyAverage}\n      totalTxNumber={totalTxNumber}\n    />\n  );\n};\n\ninterface CardsProps {\n  interval: number;\n  difficultyAverage: number;\n  totalTxNumber: number;\n}\n\nconst Cards: React.FC<CardsProps> = ({\n  interval,\n  difficultyAverage,\n  totalTxNumber,\n}) => (\n  <div className=\"cards\">\n    <div className=\"card\" key=\"interval\">\n      <strong>{interval}</strong> sec\n      <p>Average interval in this page</p>\n    </div>\n    <div className=\"card\" key=\"difficultyAverage\">\n      <strong>{Math.floor(difficultyAverage).toLocaleString()}</strong>\n      <p>Average difficulty in this page</p>\n    </div>\n    <div className=\"card\" key=\"total-tx-number\">\n      <strong>{Math.floor(totalTxNumber).toLocaleString()}</strong>\n      <p>Total txs in this page</p>\n    </div>\n  </div>\n);\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks, loading, columns }) => {\n  const timeTaken: IColumn = {\n    key: 'columnTimeTaken',\n    name: 'Time Taken',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: (block: Block, index) => {\n      if (blocks === null) throw Error('blocks is null');\n      if (index === undefined) throw Error('index is null');\n      const beforeBlock = blocks[Math.min(index + 1, blocks.length - 1)];\n      const beforeTimestamp = Date.parse(beforeBlock.timestamp);\n      const nowTimestamp = Date.parse(block.timestamp);\n      return <>{(nowTimestamp - beforeTimestamp) / 1000}</>;\n    },\n  };\n\n  if (blocks !== null) columns.splice(4, 1, timeTaken);\n  return (\n    <List\n      items={blocks}\n      loading={loading}\n      columns={columns}\n      onItemInvoked={block => navigate(`/search/?${block.hash}`)}\n    />\n  );\n};\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n   __typename?: 'Action',\n  arguments: Array<ActionArgumentType>,\n};\n\nexport type ActionArgumentType = {\n   __typename?: 'ActionArgumentType',\n  key: Scalars['String'],\n  value: Scalars['String'],\n};\n\n\nexport type Block = {\n   __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n   __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>,\n  miner?: Maybe<Scalars['Address']>\n};\n\n\n\n\n\n\n\nexport type Query = {\n   __typename?: 'Query',\n  blockQuery?: Maybe<BlockQuery>,\n  transactionQuery?: Maybe<TransactionQuery>,\n};\n\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  actions: Array<Action>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\n\nexport type TransactionQuery = {\n   __typename?: 'TransactionQuery',\n  transaction?: Maybe<Transaction>,\n  transactions: Array<Transaction>,\n};\n\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'> & { actions: Array<({ __typename?: 'Action' } & { arguments: Array<({ __typename?: 'ActionArgumentType' } & Pick<ActionArgumentType, 'key' | 'value'>)> })> });\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean'],\n  miner?: Maybe<Scalars['Address']>\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> })> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> })> });\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc: Scalars['Boolean'],\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type TransactionListQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress: Scalars['Address'],\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\n\n\nexport type TransactionsByAccountQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  actions {\n    arguments {\n      key\n      value\n    }\n  }\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!, $miner: Address) {\n  blockQuery {\n    blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs, miner: $miner) {\n      ...BlockCommon\n      miner\n      transactions {\n        id\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  blockQuery {\n    block(hash: $hash) {\n      ...BlockCommon\n      miner\n      nonce\n      previousBlock {\n        hash\n      }\n      transactions {\n        ...TransactionCommon\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionListDocument = gql`\n    query TransactionList($signer: Address, $involvedAddress: Address, $desc: Boolean!, $offset: Int!, $limit: Int!) {\n  transactionQuery {\n    transactions(signer: $signer, involvedAddress: $involvedAddress, desc: $desc, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionListQuery, TransactionListQueryVariables>, 'query'> & ({ variables: TransactionListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionListComponent = (props: TransactionListComponentProps) => (\n      <ApolloReactComponents.Query<TransactionListQuery, TransactionListQueryVariables> query={TransactionListDocument} {...props} />\n    );\n    \nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionListQuery, TransactionListQueryVariables> & TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionListQuery,\n  TransactionListQueryVariables,\n  TransactionListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionListQuery, TransactionListQueryVariables, TransactionListProps<TChildProps>>(TransactionListDocument, {\n      alias: 'withTransactionList',\n      ...operationOptions\n    });\n};\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<TransactionListQuery, TransactionListQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transactionQuery {\n    transaction(id: $id) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;\nexport const TransactionsByAccountDocument = gql`\n    query TransactionsByAccount($involvedAddress: Address!, $offset: Int, $limit: Int) {\n  transactionQuery {\n    transactions(involvedAddress: $involvedAddress, desc: true, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionsByAccountComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>, 'query'> & ({ variables: TransactionsByAccountQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionsByAccountComponent = (props: TransactionsByAccountComponentProps) => (\n      <ApolloReactComponents.Query<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> query={TransactionsByAccountDocument} {...props} />\n    );\n    \nexport type TransactionsByAccountProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> & TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables,\n  TransactionsByAccountProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionsByAccountQuery, TransactionsByAccountQueryVariables, TransactionsByAccountProps<TChildProps>>(TransactionsByAccountDocument, {\n      alias: 'withTransactionsByAccount',\n      ...operationOptions\n    });\n};\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>;","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\n\nconst formatOptions: Intl.DateTimeFormatOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  year: '2-digit',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { year, month, day, ...timeStyle } = formatOptions;\n    return (\n      <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n        {date.toLocaleString(undefined, timeStyle)}\n      </time>\n    );\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {date.toLocaleString(undefined, formatOptions)}\n    </time>\n  );\n};\n\nexport default Timestamp;\n","import React from 'react';\nimport {\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from '@fluentui/react/lib/DetailsList';\nimport { ShimmeredDetailsList } from '@fluentui/react/lib/ShimmeredDetailsList';\nimport { Block } from '../generated/graphql';\n\ninterface ListProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  items: any[] | null;\n  loading: boolean;\n  columns: IColumn[];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onItemInvoked: (item: any) => void;\n  notFoundMessage?: string;\n}\n\nconst List: React.FC<ListProps> = ({\n  items,\n  loading,\n  columns,\n  onItemInvoked,\n  notFoundMessage,\n}) => {\n  if (!loading && notFoundMessage && items && items.length === 0)\n    return <p>{notFoundMessage}</p>;\n  return (\n    <ShimmeredDetailsList\n      setKey=\"set\"\n      items={items === null || loading ? [] : items}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      enableShimmer={loading}\n      onItemInvoked={onItemInvoked}\n    />\n  );\n};\n\nexport default List;\n\nexport type OmitListProps = Omit<ListProps, 'onItemInvoked' | 'items'>;\n\nexport interface BlockListProps extends OmitListProps {\n  blocks: Block[] | null;\n}\n","import React from 'react';\n\nimport { css } from 'emotion';\nimport { DefaultButton } from '@fluentui/react';\n\ninterface OffsetSwitchProps {\n  newerHandler?: () => void;\n  olderHandler?: () => void;\n  disable: { older: boolean; newer: boolean };\n}\n\nconst OffsetSwitch: React.FC<OffsetSwitchProps> = ({\n  newerHandler,\n  olderHandler,\n  disable,\n}) => (\n  <div className=\"nav\">\n    <DefaultButton\n      onClick={newerHandler}\n      disabled={disable.newer}\n      className={css`\n        margin-right: 5px;\n      `}>\n      &larr; Newer\n    </DefaultButton>\n    <DefaultButton disabled={disable.older} onClick={olderHandler}>\n      Older &rarr;\n    </DefaultButton>\n  </div>\n);\n\nexport default OffsetSwitch;\n","import React from 'react';\nimport { Link } from '@fluentui/react';\n\nimport Timestamp from '../components/Timestamp';\nimport { Block, Transaction } from '../generated/graphql';\n\nexport const commonProps = {\n  isRowHeader: true,\n  isResizable: true,\n  isSorted: false,\n};\n\nexport const mineColumns = [\n  {\n    key: 'columnIndex',\n    name: 'Index',\n    fieldName: 'index',\n    iconName: 'NumberSymbol',\n    isIconOnly: true,\n    minWidth: 5,\n    maxWidth: 50,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ index }: Block) => <>{Number(index).toLocaleString()}</>,\n  },\n  {\n    key: 'columnHash',\n    name: 'Block Hash',\n    fieldName: 'hash',\n    minWidth: 5,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ hash }: Block) => (\n      <Link href={`./block/?${hash}`}>{hash}</Link>\n    ),\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ timestamp }: Block) => <Timestamp timestamp={timestamp} />,\n  },\n  {\n    key: 'columnMiner',\n    name: 'Miner',\n    fieldName: 'miner',\n    minWidth: 123,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ miner }: Block) => (\n      <Link href={`./account/?${miner}`}>{miner}</Link>\n    ),\n  },\n  {\n    key: 'columnDifficulty',\n    name: 'Difficulty',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ difficulty }: Block) => (\n      <>{Math.floor(difficulty).toLocaleString()}</>\n    ),\n  },\n  {\n    key: 'columnTxNumber',\n    name: 'Tx #',\n    minWidth: 5,\n    maxWidth: 40,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ transactions }: Block) => <>{transactions.length}</>,\n  },\n];\n\nexport const txColumns = [\n  {\n    key: 'columnNonce',\n    name: 'Nonce',\n    fieldName: 'nonce',\n    minWidth: 5,\n    maxWidth: 50,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n  },\n  {\n    key: 'columnId',\n    name: 'ID',\n    fieldName: 'id',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    // FIXME: We'd better to use absolute paths and make Gatsby automatically\n    // to rebase these absolute paths on the PATH_PREFIX configuration.\n    onRender: ({ id }: Transaction) => (\n      <Link href={`../transaction/?${id}`}>{id}</Link>\n    ),\n  },\n  {\n    key: 'columnSignature',\n    name: 'Signature',\n    fieldName: 'signature',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n  },\n  {\n    key: 'columnSigner',\n    name: 'Signer',\n    fieldName: 'signer',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ signer }: Transaction) => (\n      // FIXME: We'd better to use absolute paths and make Gatsby automatically\n      // to rebase these absolute paths on the PATH_PREFIX configuration.\n      <Link href={`./?${signer}`}>{signer}</Link>\n    ),\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ timestamp }: Transaction) => (\n      <Timestamp timestamp={timestamp} />\n    ),\n  },\n];\n","import useSearchParams from './useSearchParams';\n\nexport const limit = 21;\nexport default function useOffset(location: Location, keyName = 'offset') {\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const offset = keyName in searchParams ? searchParams[keyName] : 0;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      delete searchParams[keyName];\n      setSearchParams(searchParams);\n    } else {\n      searchParams[keyName] = offset;\n      setSearchParams(searchParams);\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n  return [offset, olderHandler, newerHandler] as const;\n}\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: object) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n"],"sourceRoot":""}